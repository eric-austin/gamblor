# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_deck.ipynb.

# %% auto 0
__all__ = ['Deck']

# %% ../nbs/01_deck.ipynb 3
from fastcore.utils import *
from .card import *
import random

# %% ../nbs/01_deck.ipynb 4
class Deck:
    "A deck of 52 playing cards, not including jokers."
    def __init__(self):
        self.cards = [Card(suit, rank) for suit in range(4) for rank in range(1, 14)]
    def __str__(self):
        return "; ".join(map(str, self.cards))
    __repr__ = __str__
    def __len__(self):
        return len(self.cards)
    def __contains__(self, card):
        return card in self.cards

# %% ../nbs/01_deck.ipynb 13
@patch
def pop(
    self: Deck,
    idx: int =-1, # The index of the card to remove, defaulting to the last card.
):
    "Remove and return one card from the deck."
    return self.cards.pop(idx)

# %% ../nbs/01_deck.ipynb 17
@patch
def remove(
    self: Deck,
    card: Card,
):
    "Remove `card` from the deck or raises exception if it is not present"
    self.cards.remove(card)

# %% ../nbs/01_deck.ipynb 18
@patch
def shuffle(self: Deck):
    "Shuffle the deck in place."
    random.shuffle(self.cards)

# %% ../nbs/01_deck.ipynb 19
@patch
def draw_n(
    self: Deck,
    n: int, # number of cards to draw
    replace: bool=True, # whether to draw with replacement, defaulting to True
):
    "Draw `n` cards from the deck, with replacement iif `replace` is True."
    if replace:
        # can select same card multiple times so will just select n random indices
        return [self.cards[i] for i in random.sample(range(len(self.cards)), n)]
    else:
        # if no replacement, will just draw n cards from the top of the deck
        return self.cards[:n]
